!function(){"use strict";function n(n){function o(n,o){return{error:function(r,e){n.error(r,e),o.error(r,e)},info:function(r){n.info(r),o.info(r)},warn:function(r){n.warn(r),o.warn(r)},debug:function(r){n.debug(r),o.debug(r)},log:function(r){n.log(r),o.info(r)}}}n.decorator("$log",o),o.$inject=["$delegate","shadowLogger"]}var o=angular.module("kpShadowLogger",[]);o.config(n),n.$inject=["$provide"]}();
!function(){"use strict";function n(){return{setOptions:function(n){t=$.extend(t,n,!0)},$get:function(){return e()}}}function e(){function n(n,e){var o={message:n,traceLevel:e};return o=$.extend(o,t.additionalData,!0)}function e(n,e){e>t.traceLevel||(t.logAlert?alert(n):console?console.log(n):alert(n),t.ajaxOptions.url&&o(n,e))}function o(e,o){var r={type:"POST",url:JSON.stringify(n(e,o)),contentType:"application/json"};r=$.extend(r,t.ajaxOptions,!0),$.ajax(r)}var r={error:1,warn:2,info:3,log:4,debug:5};return{error:function(n,o){e(n),e(o,r.error)},warn:function(n){e(n,r.warn)},info:function(n){e(n,r.info)},log:function(n){e(n,r.log)},debug:function(n){e(n,r.debug)}}}var o=angular.module("kpShadowLogger");o.provider("shadowLogger",n);var t={loggingUrl:"",logAlert:!1,traceLevel:5,additionalData:{machineName:""},ajaxOptions:{}}}();
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNoYWRvd0xvZ2dlci5tb2R1bGUuanMiLCJzaGFkb3dsb2dnZXIucHJvdmlkZXIuanMiXSwibmFtZXMiOlsiY29uZmlnIiwiJHByb3ZpZGUiLCJsb2dEZWNvcmF0b3IiLCIkZGVsZWdhdGUiLCJzaGFkb3dMb2dnZXIiLCJlcnJvciIsImV4Y2VwdGlvbiIsIm1lc3NhZ2UiLCJpbmZvIiwid2FybiIsImRlYnVnIiwibG9nIiwiZGVjb3JhdG9yIiwiJGluamVjdCIsImFwcCIsImFuZ3VsYXIiLCJtb2R1bGUiLCJzaGFkb3dMb2dnZXJQcm92aWRlciIsInNldE9wdGlvbnMiLCJ1c2VyT3B0aW9ucyIsIm9wdGlvbnMiLCIkIiwiZXh0ZW5kIiwiJGdldCIsImZvcm1hdE1lc3NhZ2UiLCJ0cmFjZUxldmVsIiwibWVzc2FnZUZvcm1hdCIsImFkZGl0aW9uYWxEYXRhIiwibG9nQWxlcnQiLCJhbGVydCIsImNvbnNvbGUiLCJhamF4T3B0aW9ucyIsInVybCIsImxvZ1RvU2VydmVyIiwidHlwZSIsIkpTT04iLCJzdHJpbmdpZnkiLCJjb250ZW50VHlwZSIsImFqYXgiLCJ0cmFjZUxldmVscyIsInByb3ZpZGVyIiwibG9nZ2luZ1VybCIsIm1hY2hpbmVOYW1lIl0sIm1hcHBpbmdzIjoiQ0FBQSxXQUNJLFlBSUgsU0FBU0EsR0FBT0MsR0FJZixRQUFTQyxHQUFhQyxFQUFVQyxHQUM5QixPQUNDQyxNQUFNLFNBQVNDLEVBQVVDLEdBQ3hCSixFQUFVRSxNQUFNQyxFQUFVQyxHQUMxQkgsRUFBYUMsTUFBTUMsRUFBVUMsSUFFOUJDLEtBQUssU0FBU0QsR0FDYkosRUFBVUssS0FBS0QsR0FDZkgsRUFBYUksS0FBS0QsSUFFbkJFLEtBQUssU0FBU0YsR0FDWkosRUFBVU0sS0FBS0YsR0FDaEJILEVBQWFLLEtBQUtGLElBRXBCRyxNQUFNLFNBQVNILEdBQ1pKLEVBQVVPLE1BQU1ILEdBQ2pCSCxFQUFhTSxNQUFNSCxJQUVwQkksSUFBSSxTQUFTSixHQUNYSixFQUFVUSxJQUFJSixHQUNmSCxFQUFhSSxLQUFLRCxLQXZCbkJOLEVBQVNXLFVBQVUsT0FBUVYsR0FDOUJBLEVBQWFXLFNBQVcsWUFBWSxnQkFMbEMsR0FBSUMsR0FBTUMsUUFBUUMsT0FBTyxvQkFDekJGLEdBQUlkLE9BQU9BLEdBQ1hBLEVBQU9hLFNBQVc7Q0NKdEIsV0FDRSxZQWFFLFNBQVNJLEtBRVAsT0FDSUMsV0FBWSxTQUFTQyxHQUNiQyxFQUFVQyxFQUFFQyxPQUFPRixFQUFRRCxHQUFZLElBRS9DSSxLQUFNLFdBQ0UsTUFBT25CLE9BSXRCLFFBQVNBLEtBMkJSLFFBQVNvQixHQUFjakIsRUFBUWtCLEdBQzdCLEdBQUlDLElBQ0ZuQixRQUFRQSxFQUNSa0IsV0FBV0EsRUFHYixPQURBQyxHQUFnQkwsRUFBRUMsT0FBT0ksRUFBY04sRUFBUU8sZ0JBQWUsR0FHaEUsUUFBU2hCLEdBQUlKLEVBQVFrQixHQUNoQkEsRUFBYUwsRUFBUUssYUFFckJMLEVBQVFRLFNBQ1RDLE1BQU10QixHQUVBdUIsUUFDTkEsUUFBUW5CLElBQUlKLEdBR1ZzQixNQUFNdEIsR0FFUGEsRUFBUVcsWUFBWUMsS0FDckJDLEVBQVkxQixFQUFRa0IsSUFHeEIsUUFBU1EsR0FBWTFCLEVBQVFrQixHQUMzQixHQUFJTSxJQUFlRyxLQUFLLE9BQ2xCRixJQUFJRyxLQUFLQyxVQUFVWixFQUFjakIsRUFBUWtCLElBQ3hDWSxZQUFZLG1CQUVuQk4sR0FBY1YsRUFBRUMsT0FBT1MsRUFBWVgsRUFBUVcsYUFBWSxHQUN2RFYsRUFBRWlCLEtBQUtQLEdBeERSLEdBQUlRLElBQ0RsQyxNQUFNLEVBQ05JLEtBQUssRUFDTEQsS0FBSyxFQUNMRyxJQUFJLEVBQ0pELE1BQU0sRUFHVCxRQUNHTCxNQUFNLFNBQVNDLEVBQVVDLEdBQ3ZCSSxFQUFJTCxHQUNKSyxFQUFJSixFQUFRZ0MsRUFBWWxDLFFBRTFCSSxLQUFLLFNBQVNGLEdBQ1pJLEVBQUlKLEVBQVFnQyxFQUFZOUIsT0FFMUJELEtBQUssU0FBU0QsR0FDVkksRUFBSUosRUFBUWdDLEVBQVkvQixPQUU1QkcsSUFBSSxTQUFTSixHQUNYSSxFQUFJSixFQUFRZ0MsRUFBWTVCLE1BRTFCRCxNQUFNLFNBQVNILEdBQ2JJLEVBQUlKLEVBQVFnQyxFQUFZN0IsU0EvQ2hDLEdBQUlJLEdBQU1DLFFBQVFDLE9BQU8saUJBRXZCRixHQUFJMEIsU0FBUyxlQUFldkIsRUFDNUIsSUFBSUcsSUFDRXFCLFdBQVcsR0FDWGIsVUFBUyxFQUNUSCxXQUFXLEVBQ1hFLGdCQUNFZSxZQUFZLElBRWRYIiwiZmlsZSI6InNoYWRvd0xvZ2dlci5taW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyIoZnVuY3Rpb24gKCkge1xyXG4gICAgXCJ1c2Ugc3RyaWN0XCI7XHJcbiAgICB2YXIgYXBwID0gYW5ndWxhci5tb2R1bGUoJ2twU2hhZG93TG9nZ2VyJywgW10pO1xyXG4gICAgYXBwLmNvbmZpZyhjb25maWcpO1xyXG4gICAgY29uZmlnLiRpbmplY3QgPSBbJyRwcm92aWRlJ107XHJcblx0ZnVuY3Rpb24gY29uZmlnKCRwcm92aWRlKXtcclxuXHQgICAgJHByb3ZpZGUuZGVjb3JhdG9yKCckbG9nJywgbG9nRGVjb3JhdG9yKTtcclxuXHRcdGxvZ0RlY29yYXRvci4kaW5qZWN0ID0gWyckZGVsZWdhdGUnLCdzaGFkb3dMb2dnZXInXTtcclxuICAgIFx0XHJcblx0XHRmdW5jdGlvbiBsb2dEZWNvcmF0b3IoJGRlbGVnYXRlLHNoYWRvd0xvZ2dlcil7XHJcblx0XHRcdCByZXR1cm4ge1xyXG5cdFx0XHRcdCBlcnJvcjpmdW5jdGlvbihleGNlcHRpb24sbWVzc2FnZSl7XHJcblx0XHRcdFx0XHQgJGRlbGVnYXRlLmVycm9yKGV4Y2VwdGlvbixtZXNzYWdlKTtcclxuXHRcdFx0XHRcdCBzaGFkb3dMb2dnZXIuZXJyb3IoZXhjZXB0aW9uLG1lc3NhZ2UpO1xyXG5cdFx0XHRcdCB9LFxyXG5cdFx0XHRcdCBpbmZvOmZ1bmN0aW9uKG1lc3NhZ2Upe1xyXG5cdFx0XHRcdFx0ICRkZWxlZ2F0ZS5pbmZvKG1lc3NhZ2UpO1xyXG5cdFx0XHRcdFx0IHNoYWRvd0xvZ2dlci5pbmZvKG1lc3NhZ2UpO1xyXG5cdFx0XHRcdCB9LFxyXG5cdFx0XHRcdCB3YXJuOmZ1bmN0aW9uKG1lc3NhZ2Upe1xyXG5cdFx0XHRcdFx0ICAkZGVsZWdhdGUud2FybihtZXNzYWdlKTtcclxuXHRcdFx0XHRcdCBzaGFkb3dMb2dnZXIud2FybihtZXNzYWdlKTtcclxuXHRcdFx0XHQgfSxcclxuXHRcdFx0XHRkZWJ1ZzpmdW5jdGlvbihtZXNzYWdlKXtcclxuXHRcdFx0XHRcdCAgJGRlbGVnYXRlLmRlYnVnKG1lc3NhZ2UpO1xyXG5cdFx0XHRcdFx0IHNoYWRvd0xvZ2dlci5kZWJ1ZyhtZXNzYWdlKTtcclxuXHRcdFx0XHQgfSxcclxuXHRcdFx0XHQgbG9nOmZ1bmN0aW9uKG1lc3NhZ2Upe1xyXG5cdFx0XHRcdFx0ICAkZGVsZWdhdGUubG9nKG1lc3NhZ2UpO1xyXG5cdFx0XHRcdFx0IHNoYWRvd0xvZ2dlci5pbmZvKG1lc3NhZ2UpO1xyXG5cdFx0XHRcdCB9XHJcblx0XHRcdCB9O1xyXG5cdFx0fVxyXG5cdH1cclxufSkoKTtcclxuIiwiKGZ1bmN0aW9uKCl7XHJcbiAgXCJ1c2Ugc3RyaWN0XCI7XHJcblx0IHZhciBhcHAgPSBhbmd1bGFyLm1vZHVsZSgna3BTaGFkb3dMb2dnZXInKTtcclxuICBcclxuICAgIGFwcC5wcm92aWRlcihcInNoYWRvd0xvZ2dlclwiLHNoYWRvd0xvZ2dlclByb3ZpZGVyKTsgICAgICAgICAgICBcclxuICAgIHZhciBvcHRpb25zID0ge1xyXG4gICAgICAgICAgbG9nZ2luZ1VybDonJyxcclxuICAgICAgICAgIGxvZ0FsZXJ0OmZhbHNlLFxyXG4gICAgICAgICAgdHJhY2VMZXZlbDo1LFxyXG4gICAgICAgICAgYWRkaXRpb25hbERhdGE6e1xyXG4gICAgICAgICAgICBtYWNoaW5lTmFtZTonJ1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgIGFqYXhPcHRpb25zOnt9XHJcbiAgICB9O1xyXG4gICAgZnVuY3Rpb24gc2hhZG93TG9nZ2VyUHJvdmlkZXIoKSB7XHJcbiAgICAgICBcclxuICAgICAgcmV0dXJuIHtcclxuICAgICAgICAgIHNldE9wdGlvbnM6IGZ1bmN0aW9uKHVzZXJPcHRpb25zKSB7XHJcbiAgICAgICAgICAgICAgICAgIG9wdGlvbnMgPSAkLmV4dGVuZChvcHRpb25zLHVzZXJPcHRpb25zLHRydWUpO1xyXG4gICAgICAgICAgfSxcclxuICAgICAgICAgICRnZXQ6IGZ1bmN0aW9uICgpIHtcclxuICAgICAgICAgICAgICAgICAgcmV0dXJuIHNoYWRvd0xvZ2dlcigpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICB9O1xyXG4gICAgfVxyXG4gICBmdW5jdGlvbiBzaGFkb3dMb2dnZXIoKXtcclxuICAgICB2YXIgdHJhY2VMZXZlbHMgPSB7XHJcbiAgICAgICAgZXJyb3I6MSxcclxuICAgICAgICB3YXJuOjIsXHJcbiAgICAgICAgaW5mbzozLFxyXG4gICAgICAgIGxvZzo0LFxyXG4gICAgICAgIGRlYnVnOjVcclxuICAgICB9O1xyXG4gICAgICBcclxuICAgICByZXR1cm4ge1xyXG4gICAgICAgIGVycm9yOmZ1bmN0aW9uKGV4Y2VwdGlvbixtZXNzYWdlKXtcclxuICAgICAgICAgIGxvZyhleGNlcHRpb24pO1xyXG4gICAgICAgICAgbG9nKG1lc3NhZ2UsdHJhY2VMZXZlbHMuZXJyb3IpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgd2FybjpmdW5jdGlvbihtZXNzYWdlKXtcclxuICAgICAgICAgIGxvZyhtZXNzYWdlLHRyYWNlTGV2ZWxzLndhcm4pO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgaW5mbzpmdW5jdGlvbihtZXNzYWdlKXtcclxuICAgICAgICAgICAgbG9nKG1lc3NhZ2UsdHJhY2VMZXZlbHMuaW5mbyk7XHJcbiAgICAgICAgfSxcclxuICAgICAgICBsb2c6ZnVuY3Rpb24obWVzc2FnZSl7XHJcbiAgICAgICAgICBsb2cobWVzc2FnZSx0cmFjZUxldmVscy5sb2cpO1xyXG4gICAgICAgIH0sXHJcbiAgICAgICAgZGVidWc6ZnVuY3Rpb24obWVzc2FnZSl7XHJcbiAgICAgICAgICBsb2cobWVzc2FnZSx0cmFjZUxldmVscy5kZWJ1Zyk7IFxyXG4gICAgICAgIH1cclxuICAgIH07XHJcbiAgICBmdW5jdGlvbiBmb3JtYXRNZXNzYWdlKG1lc3NhZ2UsdHJhY2VMZXZlbCl7XHJcbiAgICAgIHZhciBtZXNzYWdlRm9ybWF0ID0gIHtcclxuICAgICAgICBtZXNzYWdlOm1lc3NhZ2UsXHJcbiAgICAgICAgdHJhY2VMZXZlbDp0cmFjZUxldmVsXHJcbiAgICAgIH07XHJcbiAgICAgIG1lc3NhZ2VGb3JtYXQgPSAkLmV4dGVuZChtZXNzYWdlRm9ybWF0LG9wdGlvbnMuYWRkaXRpb25hbERhdGEsdHJ1ZSk7XHJcbiAgICAgIHJldHVybiBtZXNzYWdlRm9ybWF0O1xyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gbG9nKG1lc3NhZ2UsdHJhY2VMZXZlbCl7XHJcbiAgICAgIGlmKHRyYWNlTGV2ZWwgPiBvcHRpb25zLnRyYWNlTGV2ZWwpXHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICBpZihvcHRpb25zLmxvZ0FsZXJ0KXtcclxuICAgICAgICBhbGVydChtZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgICBlbHNlIGlmKGNvbnNvbGUpe1xyXG4gICAgICAgIGNvbnNvbGUubG9nKG1lc3NhZ2UpO1xyXG4gICAgICB9XHJcbiAgICAgIGVsc2V7XHJcbiAgICAgICAgICBhbGVydChtZXNzYWdlKTtcclxuICAgICAgfVxyXG4gICAgICBpZihvcHRpb25zLmFqYXhPcHRpb25zLnVybCl7XHJcbiAgICAgICAgbG9nVG9TZXJ2ZXIobWVzc2FnZSx0cmFjZUxldmVsKTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgZnVuY3Rpb24gbG9nVG9TZXJ2ZXIobWVzc2FnZSx0cmFjZUxldmVsKXtcclxuICAgICAgdmFyIGFqYXhPcHRpb25zID0ge3R5cGU6J1BPU1QnLFxyXG4gICAgICAgICAgICB1cmw6SlNPTi5zdHJpbmdpZnkoZm9ybWF0TWVzc2FnZShtZXNzYWdlLHRyYWNlTGV2ZWwpKVxyXG4gICAgICAgICAgICAsY29udGVudFR5cGU6J2FwcGxpY2F0aW9uL2pzb24nXHJcbiAgICAgICAgfTtcclxuICAgICAgYWpheE9wdGlvbnMgPSAkLmV4dGVuZChhamF4T3B0aW9ucyxvcHRpb25zLmFqYXhPcHRpb25zLHRydWUpO1xyXG4gICAgICAkLmFqYXgoYWpheE9wdGlvbnMpO1xyXG4gICAgfVxyXG4gIH0gICAgICAgICAgICAgICAgICAgICAgIFxyXG59KSgpO1xyXG5cclxuIl0sInNvdXJjZVJvb3QiOiIvc291cmNlLyJ9
